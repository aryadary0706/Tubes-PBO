package com.mycompany.tubes_pbo;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

// Implementasi interface ContentPage langsung di Movie
class Movie extends Content implements Contentable, ContentPage {
    private int duration;

    public Movie(int id, String title, Date releaseDate, int duration) {
        super(id, title, releaseDate);
        this.duration = duration;
    }

    public int getDuration(){
        return this.duration;
    }

    @Override
    public void info() {
        System.out.println("Movie: " + title + " | Duration: " + duration + " mins");
    }

    @Override
    public float getAverageRating() {
        if (ratings == null || ratings.isEmpty()) return 0f;
        float total = 0f;
        for (Rating r : ratings) {
            total += r.getScore();
        }
        return total / ratings.size();
    }

    @Override
    public int getReviewCount() {
        return reviews.size();
    }

    @Override
    public List<String> getGenres() {
        return genres;
    }

    // Implementasi ContentPage

    @Override
    public void showPage() {
        System.out.println("Halaman untuk film: " + getTitle());
        System.out.println("Genre: " + String.join(", ", getGenres()));
        System.out.println("Durasi: " + duration + " menit");
        System.out.println("Rating rata-rata: " + getAverageRating());
    }

    @Override
    public void showTopRated() {
        // Asumsinya ini hanya menampilkan movie jika ratingnya di atas threshold
        if (getAverageRating() >= 4.0) {
            System.out.println(getTitle() + " adalah film dengan rating tinggi.");
        }
    }

    @Override
    public void showMostReviewed() {
        System.out.println(getTitle() + " memiliki " + getReviewCount() + " review.");
    }

    @Override
    public void showByGenre() {
        for (String genre : getGenres()) {
            System.out.println("Film ini termasuk genre: " + genre);
        }
    }

    @Override
    public void everyRating() {
        for (Rating r : ratings) {
            System.out.println(r.getNama() + " memberi nilai: " + r.getScore() + " dengan review: " + r.getReviewText());
        }
    }
}
